/**
 * Firebase iOS Module
 *
 * Created by Left Lane Lab
 * Copyright (c) 2014 Your Company. All rights reserved.
 */

#import "ComLeftlanelabFirebaseModule.h"
#import "TiBase.h"
#import "TiHost.h"
#import "TiUtils.h"
#import <Firebase/Firebase.h>

@implementation ComLeftlanelabFirebaseModule

@synthesize url;
@synthesize gInstances;
@synthesize gQuery;
@synthesize gEventTypes;
@synthesize gListeners;

#pragma mark Internal

// this is generated for your module, please do not change it
-(id)moduleGUID
{
	return @"570120d7-c249-4ce5-a00c-d5b2001b279e";
}

// this is generated for your module, please do not change it
-(NSString*)moduleId
{
	return @"com.leftlanelab.firebase";
}

#pragma mark Lifecycle

-(void)startup
{
	NSLog(@"Firebase module startup");
	
	// this method is called when the module is first loaded
	// you *must* call the superclass
	[super startup];

	// Initialize [gEventTypes]
	self.gEventTypes = @[@"child_added", @"child_removed", @"child_changed", @"child_moved", @"value"];

	// Initialize [gInstances]
	self.gInstances = [NSMutableDictionary dictionary];

	// Initialize [gQuery]
	self.gQuery = [NSMutableDictionary dictionary];

	// Initialize [gListeners]
	self.gListeners = [NSMutableDictionary dictionary];

	NSLog(@"[INFO] %@ loaded", self);
}

-(void)shutdown:(id)sender
{
	// this method is called when the module is being unloaded
	// typically this is during shutdown. make sure you don't do too
	// much processing here or the app will be quit forceably

	// you *must* call the superclass
	[super shutdown:sender];
}

#pragma mark Cleanup

-(void)dealloc
{
	// release any resources that have been retained by the module
	[super dealloc];
}

#pragma mark Internal Memory Management

-(void)didReceiveMemoryWarning:(NSNotification*)notification
{
	// optionally release any resources that can be dynamically
	// reloaded once memory is available - such as caches
	[super didReceiveMemoryWarning:notification];
}

#pragma mark Listener Notifications

/*
 -(void)_listenerAdded:(NSString *)type count:(int)count
 {
 }

 -(void)_listenerRemoved:(NSString *)type count:(int)count
 {
 }
 */

#pragma Public APIs

-(void)testy: (id)args
{
	NSLog(@"Testy!!");
}


/**
 * Enable Automatic Local Persistence
 *
 */
- (void)persistence: (id)args
{
//	[Firebase setOption:@"persistence" to:@YES];
	[Firebase defaultConfig].persistenceEnabled = YES;
}

/**
 * Authenticate access to this Firebase
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (NSString) The Firebase authentication JWT generated by a secure code on a remote server.
 *  - args[2] - (KrollCallback) called with the results of the authentication attempt
 *  - args[3] - (KrollCallback) called if at any time in the future the credentials become invalid
 *
 */
- (void)auth: (id)args
{
//   if (! [args count] > 1) {return;}

	// Initialize the [arguments]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	NSString *_credential = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url || ! _credential) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] authWithCustomToken:_credential withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, id data)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc]), (data ? data : [NSNull alloc])] thisObject:nil];

	})];
}

/**
 * De-Authenticate access to this Firebase
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *
 */
- (void)unauth: (id)args
{
//    if (! [args count]) {return;}

	// Initialize the [arguments]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] unauth];
}

/**
 * Set [instance]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be updated
 *  - args[2] - (KrollCallback) callback
 *
 */
- (void)set: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] setValue:args[1] withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
	   // Execute [onComplete] callback
	   [_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Update [instance]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be updated
 *  - args[2] - (KrollCallback) callback
 *
 */
- (void)update: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] updateChildValues:args[1] withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Remove data from [instance]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *  - args[1] - (KrollCallback) callback
 *
 */
- (void)remove: (id)args
{
//    if (! [args count]) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 1 && [args[1] isKindOfClass:[KrollCallback class]] ? args[1] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] removeValueWithCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
	 // Execute [onComplete] callback
	 [_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Generate new [child] w/AutoID
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *
 *	Returns: (NSString) new [child].[key]
 */
- (NSString*)push: (id)args
{
//	if (! [args count]) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Create the new [child] and return [name]
	return [[[Firebase alloc] initWithUrl:_url] childByAutoId].key;
}

/**
 * Set [instance] with [priority]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be set
 *	- args[2] - (id) priority to be set
 *  - args[3] - (KrollCallback) callback
 *
 */
- (void)setWithPriority: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] setValue:args[1] andPriority:args[2] withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
	   // Execute [onComplete] callback
	   [_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Set [priority] of [instance]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) priority to be set
 *  - args[2] - (KrollCallback) callback
 *
 */
- (void)setPriority: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] setPriority:args[1] withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
	  // Execute [onComplete] callback
	  NSString *_test = [_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Atomically modify the data of [instance]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *  - args[1] - (KrollCallback) updateFunction callback
 *	- args[2] - (NSNumber) applyLocally (default: YES)
 *  - args[3] - (KrollCallback) onComplete callback
 *
 */
- (void)transaction: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_updateFunction = ([args[1] isKindOfClass:[KrollCallback class]] ? args[1] : nil);
	BOOL *_applyLocally = ([args[2] isKindOfClass:[NSNumber class]] ? ([args[2] isEqualToNumber:[NSNumber numberWithBool:YES]]) : YES);
	KrollCallback *_onComplete = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _url || ! _updateFunction) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] runTransactionBlock:^FTransactionResult *(FMutableData *currentData)
	{
		// Load the [payload] with the [updateFunction]
		NSDictionary *_payload = [NSDictionary dictionaryWithDictionary:[_updateFunction call:@[[self FMutableDataSpider:currentData]] thisObject:nil]];

		// Validate the [payload] and Commit Transaction
		if (_payload[@".priority"] && _payload[@".value"])
		{
			// Update [currentData] from [payload]
			currentData.value = _payload[@".value"];
			currentData.priority = ([_payload[@".priority"] isKindOfClass:[NSString class]] || [_payload[@".priority"] isKindOfClass:[NSNumber class]] ? _payload[@".priority"] : currentData.priority);

			return [FTransactionResult successWithValue:currentData];
		}

		// Abort Transaction
		return [FTransactionResult abort];
	}

	// Execute [onComplete] callback
	andCompletionBlock:(! _onComplete ? nil : ^(NSError *error, BOOL committed, FDataSnapshot *snapshot)
	{
		[_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc]), [NSNumber numberWithBool:committed], [self FDataSnapshotSpider:snapshot]] thisObject:nil];
	})

	withLocalEvents:_applyLocally];
}

/**
 * Manually disconnect the Firebase
 */
- (void)goOffline: (id)args
{
	// Kick the Firebase
	[Firebase goOffline];
}

/**
 * Manually re-connect the Firebase
 */
- (void)goOnline: (id)args
{
	// Kick the Firebase
	[Firebase goOnline];
}

/**
 * Create a Firebase [listener] and return a [handle]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (NSString) Event Type to listen for
 *  - args[2] - (KrollCallback) callback
 *  - args[2] - (KrollCallback) cancelCallback
 *
 */
-(id)on: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	NSString *_type = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	KrollCallback *_callback = ([args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);
	KrollCallback *_cancelCallback = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _url || ! _type || ! _callback) {return;}

	// Validate [type] and set [event]
	NSUInteger _search = [self.gEventTypes indexOfObject:_type];
	if (_search == NSNotFound) {return;}
	int *_event = _search;

	//	NSLog(@"[INFO] Adding Listener: %@ (%@)", _type, _url);

	// Initialize [gInstances] for [url] (only done once p/[url])
	if (! self.gInstances[_url])
	{
		[self.gInstances setObject:[[Firebase alloc] initWithUrl:_url] forKey:_url];
		[self.gListeners setObject:[NSMutableDictionary dictionary] forKey:_url];
	}

	// Set the [handle] while creating a [listener]
	FirebaseHandle _handle = [self.gInstances[_url] observeEventType:_event andPreviousSiblingKeyWithBlock:^(FDataSnapshot *_snapshot, NSString *_prevName)
	{
		// Execute [callback]
		[[NSOperationQueue mainQueue] addOperationWithBlock:^
		{
			[_callback call:@[[self FDataSnapshotSpider:_snapshot], (_prevName ? _prevName : [NSNull alloc])] thisObject:nil];
		}];

/*		dispatch_async(dispatch_get_main_queue(), ^{
			[_callback call:@[[self FDataSnapshotSpider:_snapshot], (_prevName ? _prevName : [NSNull alloc])] thisObject:nil];
		});
*/
	}

	// Execute [cancelCallback] callback
	withCancelBlock:(! _cancelCallback ? nil : ^(NSError *error)
	{
		[_cancelCallback call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];

	// Save the [handle] in [gListeners].[type]
	[self.gListeners[_url] setObject:[NSNumber numberWithInteger:_handle] forKey:[NSNumber numberWithInteger:_handle]];

	//	NSLog(@"[INFO] Returning Handle: (%@)", [NSNumber numberWithInteger:_handle]);

	// Return the [key] for future reference
	return [NSNumber numberWithInteger:_handle];
}

/**
 * Remove a [listener] from an [instance] by [handle]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (NSNumber) Key to [gListeners] for [handle]
 *
 */
-(void)off: (id)args
{
//	if (! [args count] > (int)@1) {return;}

	// Initialize the [arguments]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	NSNumber *_handle = ([args[1] isKindOfClass:[NSNumber class]] ? args[1] : nil);

	//	NSLog(@"[INFO] Removing Listener: %@ (%@)", _handle, _url);

	// Argument Filter
	if (! _url || ! _handle) {return;}

	// Validate [gInstance] && [gListeners] for this [url]
	if (! self.gInstances[_url] || ! self.gListeners[_url])
	{
		// Release [gInstances] && [gListeners] for this [url] (if set)
		if (self.gInstances[_url]) {[self.gInstances removeObjectForKey:_url];}
		if (self.gListeners[_url]) {[self.gListeners removeObjectForKey:_url];}

		// Finished Housekeeping
		return;
	}

	// Validate the [handle] was set for this [url]
	if (! self.gListeners[_url][_handle]) {return;}

	// Remove the [listener] by [handle] from [gInstance]
	[self.gInstances[_url] removeObserverWithHandle:[_handle integerValue]];

	//	NSLog(@"[INFO] Listener Removed: %@ (%@)", _handle, _url);

	// Remove the [handle] from [gListeners].[type]
	[self.gListeners[_url] removeObjectForKey:_handle];

	// Release [gInstance].[url] if this is the last [gListener]
	if (! [self.gListeners[_url] count])
	{
		//		NSLog(@"[INFO] Releasing Instance (%@)", _url);

		[self.gInstances removeObjectForKey:_url];
		[self.gListeners removeObjectForKey:_url];
	}
}

/**
 * Listen to [Firebase] for one event
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (NSString) Event Type to listen for
 *  - args[2] - (KrollCallback) successCallback
 *  - args[2] - (KrollCallback) failureCallback
 *
 */
-(void)once: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	NSString *_type = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	KrollCallback *_successCallback = ([args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);
	KrollCallback *_failureCallback = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _url || ! _type || ! _successCallback) {return;}

	// Validate [type] and set [event]
	NSUInteger _search = [self.gEventTypes indexOfObject:_type];
	if (_search == NSNotFound) {return;}
	int *_event = _search;

	// Create a [listener]
	[[[Firebase alloc] initWithUrl:_url] observeSingleEventOfType:_event andPreviousSiblingKeyWithBlock:^(FDataSnapshot *_snapshot, NSString *_prevName)
	{
		// Execute [callback]
		[_successCallback call:@[[self FDataSnapshotSpider:_snapshot], (_prevName ? _prevName : [NSNull alloc])] thisObject:nil];
	}

	// Execute [cancelCallback] callback
	withCancelBlock:(! _failureCallback ? nil : ^(NSError *error)
	{
		[_failureCallback call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Create a listener for a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) Event Type to listen for
 *  - args[2] - (KrollCallback) callback
 *  - args[2] - (KrollCallback) cancelCallback
 *
 */
-(id)queryOn: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_type = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	KrollCallback *_callback = ([args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);
	KrollCallback *_cancelCallback = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _id || ! _type || ! _callback) {return;}

	// Validate [type] and set [event]
	NSUInteger _search = [self.gEventTypes indexOfObject:_type];
	if (_search == NSNotFound) {return;}
	int *_event = _search;

	// Verify a [gQuery] exists for this [id]
	if (! self.gQuery[_id]) {return;}

	// Set the [handle] while creating a [listener]
	FirebaseHandle _handle = [self.gQuery[_id] observeEventType:_event andPreviousSiblingKeyWithBlock:^(FDataSnapshot *_snapshot, NSString *_prevName)
	{
//		for (FDataSnapshot *child in _snapshot.children) {
//			NSLog(@"Snapshot child in order: %@", child.value);
//		}
		
		// Execute [callback]
		[_callback call:@[[self FDataSnapshotSpider:_snapshot], (_prevName ? _prevName : [NSNull alloc])] thisObject:nil];
	}

	// Execute [cancelCallback] callback
	withCancelBlock:(! _cancelCallback ? nil : ^(NSError *error)
	{
		[_cancelCallback call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];

	// Return the [handle] for future reference
	return [NSNumber numberWithInteger:_handle];
}


/**
 * Remove a listener from a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSNumber) Key to [gQueryListeners] for [handle]
 *
 */
-(void)queryOff: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSNumber *_handle = ([args[1] isKindOfClass:[NSNumber class]] ? args[1] : nil);

	// Argument Filter
	if (! _id || ! _handle) {return;}

	// Validate [gQuery]
	if (! self.gQuery[_id]) {return;}

	// Remove the listener by [handle] from [gQuery]
	[self.gQuery[_id] removeObserverWithHandle:[_handle integerValue]];
}

/**
 * Listen to [gQuery] for one event
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) Event Type to listen for
 *  - args[2] - (KrollCallback) successCallback
 *  - args[2] - (KrollCallback) failureCallback
 *
 */
-(void)queryOnce: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_type = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	KrollCallback *_successCallback = ([args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);
	KrollCallback *_failureCallback = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _id || ! _type || ! _successCallback) {return;}

	// Validate [type] and set [event]
	NSUInteger _search = [self.gEventTypes indexOfObject:_type];
	if (_search == NSNotFound) {return;}
	int *_event = _search;

	// Verify a [gQuery] exists for this [id]
	if (! self.gQuery[_id]) {return;}

	// Set the [handle] while creating a [listener]
	[self.gQuery[_id] observeSingleEventOfType:_event andPreviousSiblingKeyWithBlock:^(FDataSnapshot *_snapshot, NSString *_prevName)
	{
		// Execute [callback]
		[_successCallback call:@[[self FDataSnapshotSpider:_snapshot], (_prevName ? _prevName : [NSNull alloc])] thisObject:nil];
	}

	// Execute [cancelCallback] callback
	withCancelBlock:(! _failureCallback ? nil : ^(NSError *error)
	{
		[_failureCallback call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Limit a [gQuery] to a specified number of children.
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 *	- args[2] - (NSNumber) the limit
 *
 */
-(void)limitToFirst: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	NSNumber *_limit = ([args[2] isKindOfClass:[NSNumber class]] ? args[2] : nil);

	// Argument Filter
	if (! _id || ! _url || ! _limit) {return;}

	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryLimitedToFirst:[_limit integerValue]] forKey:_id];
	}

	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryLimitedToFirst:[_limit integerValue]] forKey:_id];
	}
}

/**
 * Limit a [gQuery] to a specified number of children.
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 *	- args[2] - (NSNumber) the limit
 *
 */
-(void)limitToLast: (id)args
{
//	if (! [args count] > (int)@2) {return;}
	
	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	NSNumber *_limit = ([args[2] isKindOfClass:[NSNumber class]] ? args[2] : nil);
	
	// Argument Filter
	if (! _id || ! _url || ! _limit) {return;}
	
	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryLimitedToLast:[_limit integerValue]] forKey:_id];
	}
	
	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryLimitedToLast:[_limit integerValue]] forKey:_id];
	}
}

/**
 * Create a listener for a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 *	- args[1] - (NSString) The child key to order by
 *
 */
-(void)orderByChild: (id)args
{
	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	NSString *_key = ([args[2] isKindOfClass:[NSString class]] ? args[2] : nil);
	
	// Argument Filter
	if (! _id || ! _url || ! _key) {return;}
	
	NSLog(@"Ordering by %@", _key);
	
	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
//		[[[[Firebase alloc] initWithUrl:_url] queryOrderedByChild:_key]
//			observeEventType:FEventTypeValue withBlock:^(FDataSnapshot *snap){
//				for (FDataSnapshot *child in snap.children) {
//					NSLog(@"Snapshot child in order: %@", child.value);
//				}
//			}];
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryOrderedByChild:_key] forKey:_id];
	}
	
	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryOrderedByChild:_key] forKey:_id];
	}
}

/**
 * Create a listener for a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 */
-(void)orderByKey: (id)args
{
	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	
	// Argument Filter
	if (! _id || ! _url) {return;}
	
	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryOrderedByKey] forKey:_id];
	}
	
	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryOrderedByKey] forKey:_id];
	}
}

/**
 * Create a listener for a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 */
-(void)orderByValue: (id)args
{
	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	
	// Argument Filter
	if (! _id || ! _url) {return;}
	
	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryOrderedByValue] forKey:_id];
	}
	
	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryOrderedByValue] forKey:_id];
	}
}

/**
 * Create a listener for a [gQuery] instance
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 */
-(void)orderByPriority: (id)args
{
	// Initialize the [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	
	// Argument Filter
	if (! _id || ! _url) {return;}
	
	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryOrderedByPriority] forKey:_id];
	}
	
	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryOrderedByPriority] forKey:_id];
	}
}

/**
 * Set a [gQuery] to the specified starting point
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 *	- args[2] - (NSNull || NSString || NSNumber) the priority
 *	- args[3] - (NSString) the childName
 *
 */
-(void)startAt: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the SIMPLE [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	id _priority = ([args[2] isKindOfClass:[NSNull class]] || [args[2] isKindOfClass:[NSNumber class]] || [args[2] isKindOfClass:[NSString class]] ? args[2] : nil);
	NSString *_childName = ([args count] > 3 && [args[3] isKindOfClass:[NSString class]] ? args[3] : nil);

	// Argument Filter
	if (! _id || ! _url) {return;}

	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		
		[self.gQuery setObject:[[[[Firebase alloc] initWithUrl:_url] queryOrderedByPriority] queryStartingAtValue:_priority childKey:_childName] forKey:_id];
	}

	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryStartingAtPriority:_priority andChildName:_childName] forKey:_id];
	}
}

/**
 * Set a [gQuery] to the specified ending point
 *
 *	- args[0] - (NSNumber) the [gQuery] instance identifier
 *	- args[1] - (NSString) the URL for the Firebase Reference
 *	- args[2] - (NSNull || NSString || NSNumber) the priority
 *	- args[3] - (NSString) the childName
 *
 */
-(void)endAt: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the SIMPLE [args]
	NSNumber *_id = ([args[0] isKindOfClass:[NSNumber class]] ? args[0] : nil);
	NSString *_url = ([args[1] isKindOfClass:[NSString class]] ? args[1] : nil);
	id _priority = ([args[2] isKindOfClass:[NSNull class]] || [args[2] isKindOfClass:[NSNumber class]] || [args[2] isKindOfClass:[NSString class]] ? args[2] : nil);
	NSString *_childName = ([args count] > 3 && [args[3] isKindOfClass:[NSString class]] ? args[3] : nil);

	// Argument Filter
	if (! _id || ! _url) {return;}

	// Initialize [gQuery] for [id] (only done once p/[id])
	if (! self.gQuery[_id])
	{
		[self.gQuery setObject:[[[[Firebase alloc] initWithUrl:_url] queryOrderedByPriority] queryEndingAtValue:_priority childKey:_childName] forKey:_id];
//		[self.gQuery setObject:[[[Firebase alloc] initWithUrl:_url] queryEndingAtPriority:_priority andChildName:_childName] forKey:_id];
	}

	// Update existing [gQuery] reference
	else
	{
		[self.gQuery setObject:[self.gQuery[_id] queryEndingAtPriority:_priority andChildName:_childName] forKey:_id];
	}
}

/**
 * Cancel [onDisconnect] instructions
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *  - args[1] - (KrollCallback) callback
 *
 */
-(void)onDisconnectCancel: (id)args
{
//    if (! [args count]) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 1 && [args[1] isKindOfClass:[KrollCallback class]] ? args[1] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] cancelDisconnectOperationsWithCompletionBlock:(! _onComplete ? nil : ^(NSError *_error, Firebase *_ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(_error ? [_error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Remove data @ [url] [onDisconnect]
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *  - args[1] - (KrollCallback) callback
 *
 */
-(void)onDisconnectRemove: (id)args
{
//    if (! [args count]) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 1 && [args[1] isKindOfClass:[KrollCallback class]] ? args[1] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] onDisconnectRemoveValueWithCompletionBlock:(! _onComplete ? nil : ^(NSError *_error, Firebase *_ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(_error ? [_error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Set [value] @ [url] (onDisconnect)
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be updated
 *  - args[2] - (KrollCallback) callback
 *
 */
-(void)onDisconnectSet: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] onDisconnectSetValue:args[1] withCompletionBlock:(! _onComplete ? nil : ^(NSError *_error, Firebase *_ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(_error ? [_error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Set [value] @ [url] w/[priority] (onDisconnect)
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be updated
 *	- args[2] - (NSString | NSNumber) priority to be set
 *  - args[3] - (KrollCallback) callback
 *
 */
-(void)onDisconnectSetWithPriority: (id)args
{
//    if (! [args count] > (int)@2) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 3 && [args[3] isKindOfClass:[KrollCallback class]] ? args[3] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] onDisconnectSetValue:args[1] andPriority:args[2] withCompletionBlock:(! _onComplete ? nil : ^(NSError *error, Firebase *ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(error ? [error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

/**
 * Update [value] @ [url] (onDisconnect)
 *
 *	- args[0] - (NSString) the URL for Firebase Reference
 *	- args[1] - (id) values to be updated
 *  - args[2] - (KrollCallback) callback
 *
 */
-(void)onDisconnectUpdate: (id)args
{
//    if (! [args count] > (int)@1) {return;}

	// Initialize the [args]
	NSString *_url = ([args[0] isKindOfClass:[NSString class]] ? args[0] : nil);
	KrollCallback *_onComplete = ([args count] > 2 && [args[2] isKindOfClass:[KrollCallback class]] ? args[2] : nil);

	// Argument Filter
	if (! _url) {return;}

	// Kick the Firebase
	[[[Firebase alloc] initWithUrl:_url] onDisconnectUpdateChildValues:args[1] withCompletionBlock:(! _onComplete ? nil : ^(NSError *_error, Firebase *_ref)
	{
		// Execute [onComplete] callback
		[_onComplete call:@[(_error ? [_error localizedDescription] : [NSNull alloc])] thisObject:nil];
	})];
}

#pragma mark Internal Utility Functions

-(id)FDataSnapshotSpider: (FDataSnapshot*)snapshot
{
	// Initialize the [payload]
	NSMutableDictionary *payload = [NSMutableDictionary dictionary];

	[payload setObject:(snapshot.key ? snapshot.key : @"root") forKey:@"key"];
	[payload setObject:snapshot.priority forKey:@"priority"];
	[payload setObject:[NSNumber numberWithInteger:snapshot.childrenCount] forKey:@"childrenCount"];

	// Check if [value] is an ARRAY
	if ([snapshot.value isKindOfClass:[NSArray class]])
	{
		[payload setObject:snapshot.value forKey:@"value"];
		[payload setObject:[NSNumber numberWithInteger:0] forKey:@"childrenCount"];
	}

	// Use [children] to set [value] w/Priority
	else if (snapshot.childrenCount)
	{
		// Initialize the [children]
		NSMutableDictionary *children = [NSMutableDictionary dictionary];

		for (FDataSnapshot *child in snapshot.children)
		{

//			NSLog(@"Snapshot child in order: %@", child.value);

			[children setObject:[self FDataSnapshotSpider:child] forKey:child.key];
		}

		[payload setObject:children forKey:@"value"];
	}

	// No [children]
	else
	{
		[payload setObject:snapshot.value forKey:@"value"];
	}

	return payload;
}

-(id)FMutableDataSpider: (FMutableData*)data
{
	// Initialize the [payload]
	NSMutableDictionary *payload = [NSMutableDictionary dictionary];

	[payload setObject:(data.key ? data.key : @"root") forKey:@"key"];
	[payload setObject:data.priority forKey:@"priority"];
	[payload setObject:[NSNumber numberWithInteger:data.childrenCount] forKey:@"childrenCount"];

	// Check if [value] is an ARRAY
	if ([data.value isKindOfClass:[NSArray class]])
	{
		[payload setObject:data.value forKey:@"value"];
		[payload setObject:[NSNumber numberWithInteger:0] forKey:@"childrenCount"];
	}

	// Use [children] to set [value] w/Priority
	else if (data.hasChildren)
	{
		// Initialize the [children]
		NSMutableDictionary *children = [NSMutableDictionary dictionary];

		for (FMutableData *child in data.children)
		{
			[children setObject:[self FMutableDataSpider:child] forKey:child.key];
		}

		[payload setObject:children forKey:@"value"];
	}

	// No [children]
	else
	{[payload setObject:data.value forKey:@"value"];}

	return payload;
}

@end